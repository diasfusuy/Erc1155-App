{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Forge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IMint1155 {\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n    function mintByForge(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) external;\r\n} \r\n\r\ncontract Forge is Ownable {\r\n    IMint1155 public mint1155;\r\n\r\n    constructor(address _mint1155) Ownable(msg.sender) {\r\n        mint1155 = IMint1155(_mint1155);\r\n    }\r\n    \r\n\r\n\r\n    function forgeItem(uint256[] memory ids) public {\r\n    uint256 forgedId;\r\n\r\n    if (ids.length == 2) {\r\n        uint256 id1 = ids[0];\r\n        uint256 id2 = ids[1];\r\n        if ((id1 == 0 && id2 == 1) || (id1 == 1 && id2 == 0)) {\r\n            forgedId = 3; // FlamingSword\r\n        } else if ((id1 == 1 && id2 == 2) || (id1 == 2 && id2 == 1)) {\r\n            forgedId = 4; // EnchantedShield\r\n        } else if ((id1 == 0 && id2 == 2) || (id1 == 2 && id2 == 0)) {\r\n            forgedId = 5; // BattleAxe\r\n        } else {\r\n            revert(\"Invalid 2-item combo\");\r\n        }\r\n\r\n        mint1155.safeTransferFrom(msg.sender, address(0), id1, 1, \"\");\r\n        mint1155.safeTransferFrom(msg.sender, address(0), id2, 1, \"\");\r\n    } else if (ids.length == 3) {\r\n        uint256 id1 = ids[0];\r\n        uint256 id2 = ids[1];\r\n        uint256 id3 = ids[2];\r\n        // Check all 6 permutations of 0,1,2\r\n        if (\r\n            (id1 == 0 && id2 == 1 && id3 == 2) ||\r\n            (id1 == 0 && id2 == 2 && id3 == 1) ||\r\n            (id1 == 1 && id2 == 0 && id3 == 2) ||\r\n            (id1 == 1 && id2 == 2 && id3 == 0) ||\r\n            (id1 == 2 && id2 == 0 && id3 == 1) ||\r\n            (id1 == 2 && id2 == 1 && id3 == 0)\r\n        ) {\r\n            forgedId = 6; // Heroâ€™s Armor\r\n            mint1155.safeTransferFrom(msg.sender, address(0), id1, 1, \"\");\r\n            mint1155.safeTransferFrom(msg.sender, address(0), id2, 1, \"\");\r\n            mint1155.safeTransferFrom(msg.sender, address(0), id3, 1, \"\");\r\n        } else {\r\n            revert(\"Invalid 3-item combo\");\r\n        }\r\n    } else {\r\n        revert(\"Invalid number of items\");\r\n    }\r\n\r\n    mint1155.mintByForge(msg.sender, forgedId, 1, \"\");\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}